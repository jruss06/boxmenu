#!/usr/bin/env python3
import os
import glob
import uuid
import sys, getopt
import json

class DesktopItem:
    def __init__(self, name, types, command):
        self.name = name
        self.types = types
        self.command = command
        self.used = False

cats = {}
favorites = []
system = []

def writeMenu():
    path = "$HOME/.config/openbox/menu.xml"
    exp_var = os.path.expandvars(path) 
    if os.path.exists(exp_var) == False:
        print(path + " does not exist")
        return
    data = '<?xml version="1.0" encoding="utf-8"?> \n'
    data += '<openbox_menu xmlns="http://openbox.org/"'
    data += ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n'
    data += '  xsi:schemaLocation="http://openbox.org/"> \n'
    data += ' <menu id="root-menu" label="boxmenu-gen" execute="boxmenu" /> \n'
    data += '</openbox_menu>'
    f = open(exp_var, "w")
    f.write(data)
    f.close()
    print("wrote menu.xml file")

def cleanCommand(command):
    words = command.split()
    if '%' in words[-1]: 
        words.pop(-1)
    if words[-1] == '--': 
        words.pop(-1)
    command = " ".join(words)
    return command

def printMenu(items, cat_name):
        print("<menu id=\"" + str(uuid.uuid4()) + "\" label=\"" + cat_name + "\">")
        for desktop in items:
                print("<item label=\"" + desktop.name +"\"><action name=\"Execute\"><command><![CDATA[" + desktop.command + "]]></command></action></item>")
        print("</menu>")

def generate(otherMenu, systemName):
    entries = glob.glob('/usr/share/applications/*.desktop') 
    entries.extend(glob.glob('/usr/local/share/applications/*.desktop')) 
    desktopFiles = []
    for entry in entries:
        f = open(entry)
        newItem = ["None", "None", "None", "None"]
    
        for line in f:
            strings = line.split("=")
            if strings[0] == "Name" and newItem[0] == "None":
                newItem[0] = strings[1]
            if strings[0] == "Exec" and newItem[1] == "None":
                newItem[1] = strings[1]
            if strings[0] == "Categories" and newItem[2] == "None":
                newItem[2] = strings[1]
            if strings[0] == "NoDisplay":
                newItem[3] = strings[1]
        f.close()
    
        if len(newItem) == 4 and newItem[3].strip() != "true":
            command = cleanCommand(newItem[1])
            desktopFiles.append(DesktopItem(newItem[0].strip(), newItem[2], command))
    
    print("<openbox_pipe_menu>")
    for fav in favorites:
        if fav.used == False:
            fav.used = True
            print("<item label=\"" + fav.name +"\"> <action name=\"Execute\"><command><![CDATA[" + fav.command + "]]></command></action></item>")
    
    print("<separator label=\"Categories\"/>")
    for cat in sorted(cats):
        items = []
        for desktop in desktopFiles:
            if cats[cat] in desktop.types and desktop.used == False:
                desktop.used = True
                items.append(desktop)
        if len(items) > 0:
            printMenu(items, cat)
    
    if otherMenu:
        print("<menu id=\"" + str(uuid.uuid4()) + "\" label=\"Other\">")
        for desktop in desktopFiles:
            if desktop.used == False:
                desktop.used = True
                print("<item label=\"" + desktop.name +"\"> <action name=\"Execute\"><command><![CDATA[" + desktop.command + "]]></command></action></item>")
        print("</menu>")

    print("<separator/>")
    print("<menu id=\"" + str(uuid.uuid4()) + "\" label=\"" + systemName +"\">")
    for desktop in system:
        if desktop.used == False:
            desktop.used = True
            print("<item label=\"" + desktop.name +"\"> <action name=\"Execute\"><command><![CDATA[" + desktop.command + "]]></command></action></item>")
    print("</menu>")
    print("</openbox_pipe_menu>")

def loadConf():
    conf = None
    path = "$HOME/.config/boxmenu/config.json"
    exp_var = os.path.expandvars(path) 
    if os.path.exists(exp_var) == False:
        print("config file not found")
        return

    with open(exp_var) as f:
        conf = json.load(f)

    if conf != None:
        otherMenu = conf['otherMenu']
        systemName = conf['systemName']
        for i in conf['favorites']:
            favorites.append(DesktopItem(i[0], None, i[1]))
        for i in conf['system']:
            system.append(DesktopItem(i[0], None, i[1]))
        for cat in conf['categories']:
            cats[cat[0]] = cat[1]

    generate(otherMenu, systemName)

## MAIN ##
def main():
    argumentList = sys.argv[1:]
     
    # Options
    options = "hw" 
    # Long options
    long_options = ["help", "write"]
    
    if len(argumentList) == 0:
        loadConf()
    
    try:
        # Parsing argument
        arguments, values = getopt.getopt(argumentList, options, long_options)
         
        # checking each argument
        for currentArgument, currentValue in arguments:
     
            if currentArgument in ("-h", "--help"):
                print("usage: boxmenu [options] \n")
                print("    -h, --help        help")
                print("    -w, --write       write menu.xml file")
                 
            elif currentArgument in ("-w", "--write"):
                writeMenu()
    
    except getopt.error as err:
        # output error, and return with an error code
        print (str(err))

if __name__ == "__main__":
    main()
